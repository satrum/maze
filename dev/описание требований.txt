
идея для игры:
RPG (ролевая модель персонажей, возможность развивать персонажей в различных направлениях)
крафтинг + майнинг (создание и поиск предметов)
создание карт (случайный алгоритм генерации + кастомный с вставкой заготовленных элементов + на базе картин)
AI (наличие искусственного интеллекта)
мобильные сенсоры (получение и использование сигналов от акселерометра, gps, сенсорного экрана)
AR (дополненная реальность - не только привязка к месту и карте, но и к событиям в реальной мире, статистическим данным из мира, например погода, ландшафт, плотность населения, траффик)
pvp (возможность устаривать бои между людьми)
cooperate (возможность кооперативного режима игры двумя людьми, группой лиц, объединение к альянсы)

станция (база, по которой можно перемещаться)+космос(враждебная среда):
управление двумя персожами - пилот и дрон
границы враждебной среды могут меняться (лабиринг и двери)
может быть несколько режимов игры:
	защита базы - нужно удержать оборону извне
	спасение базы - часть базы захвачено, надо пройти по ней и все зачистить и настроить нормальную среду обитания
	добраться до базы - перемещение по враждебной среде между точками где есть ресурсы до входа в базу
может быть несколько этажей
могут быть секретные уровни
может быть несколько разных сред с разной степенью опасности:
	ok вакуум
	ok кислород
	опасный ядовитый газ
	биоатака, заражение
	вода и затопление водой
	лава, огонь и затопление лавой
может быть разный вид:
	пилот - от первого лица
	дрон - вид на карту сверху
может быть разный "туман войны":
	дрон - видит вибрации, поля, опасную среду, излучения, может взламывать устройства, оружие модульное
	пилот - может использовать маскировку от дрона, видит вдоль коридоров,  использует ручное оружие, возможно использование имплантов расширяющих восприятие
ok среда:
	среда имеет скорость распространения и ее плотность меняется из более плотной в менее плотную дискретными единицами (т.е. в сторону меньшего значения)
	среда составляет отдельную маску над картой коридоров, как и "туман войны"
	например если соседние поля были с концентрацией 10 и 0, то после шага концентрация выравнивается и становится 5 и 5 (10-0=5)
	при делении разницы среды надвое то, что перемещается округляется в большую сторону: коридор 10, 5, 5, 0 -> (10-5)//2+1=3  -> 7, 8, 2, 3
объекты:
	стена неразрушаемая (разного типа)
	стена разрушаемая (разного типа)
	ok - maze_objects[][]=4 стена перемещаемая (можно тянуть и толкать)
	генератор кислорода (от него распространяется среда - кислород)
	генератор воды (от него распространяется среда - вода)
	источник лавы
	источник биоопасности
	источник опасного газа
	дверь закрытая, открывается move в ее сторону
	дверь открытая, закрывается move от нее
	дверь открываемая ключом (становиться обычной дверью)
	ключ от двери
	ok - maze_objects[][]=5 враг, монстр (различаются набором параметров  и поведением) типы: enemy_type враги: enemy
	дрон
	пилот
	лифт (переход между двумя этажами)
	оружие ближнего боя (пока есть только урон)
	оружие дальнего боя
	боеприпасы
	устройство (выполнение особой функции заданной для выполнения квеста, хранение контента)
	ловушка (единоразово наносит урон или накладывает эффект, можно увидеть заранее, если иметь сканер)
	портал (может быть односторонним или двухсторонним, в нем записана координата, например может быть использован для телепортации в секретную локацию), хранить в отдельном массиве связи и переходы
	ok - maze_objects[][]=7 яма (в нее может утекать среда, например кислород)
	место подзарядки (для дрона или скафандра)
	стационарный сканер (показывает карту в определенном месте, определенного радиуса)
	ok - maze_objects[][]=2 энергия (+50% к энергии скафандра или дрона)
	ok - maze_objects[][]=3 кислородный баллон (+50% к запасу кислорода скафандра)
	ok - maze_objects[][]=6 аптечка (+50% к здоровью пилота)
	усилитель брони (+50% к восстановлению брони скафандра или дрона)
	мина неактивная
	мина заряженная с таймером
	мина активируемая при приближении
	ретранслятор (при активации увеличивает радиус связи пилота и дрона)
	электронные компоненты (нужны для апгрейда дрона в мастерской)
	мастерская (место апгрейда дрона)
	антидот (спасает от заражения воздуха газом)
	очиститель воздуха (поглощает высокие концентрации ядовитого газа)
параметры персонажа:
	координаты
	action statistics
	туман войны
	здоровье
	запас ресурса скафандра - кислород (запас восстанавливается или тратится при наличии или отсутсвии среды "кислород"), броня физическая, броня силовая, энергия.
	предметы (оружие, боеприпасы, сканер, другое)
	активный предмет (например оружие)
	состояние - заражение, парализован, ослеплен, отравлен
враги:
	1 тип ближнего боя - блуждают, агряться при приближении
	2 тип ближнего боя - стоят, агряться при приближении, взрываются при контакте, можно взорвать на расстоянии
	3 тип ближнего боя - плесень, быстро размножаются в воздушной среде, поглощают кислород, выделяют яд, расползаются по свободному пространству, горят
	1 тип дальнего боя - блуждают, агряться при приближении, идут или стреляют
	2 тип дальнего боя - стоят,  агряться при приближении, стреляют далеко
	3 тип дальнего боя - блуждают, пугаются при приближении, бегут и отстреливаются
генерация карты:
	0. проверка, что в этом месте еще не было карты. Если карта старая, она частично меняется. Чем старше, тем сильнее меняется.
	1. выбор уровня сложности
	2. выбор мест выхода
	3. сшивание с соседними блоками, если есть (например генерация блоков 100 на 100, по каждому краю несколько проходов в соседний блок, блоков например 3 на 3 и дополнительно наличие нескольких этажей)
	4. выбор размера матрицы
	5. выбор алгоритма генерации лабиринта (несколько алгоритмов, использующих разный паттерн)
	6. размещение помещений. Готовые custom уровни, разного размера, формы, которые дополнительно поворачиваются и отражаются перед накладыванием на карту. Помещения разные для разных уровней и встречаются с разной частотой и разным наполнением.
	7. размещение объектов (дополнительные слои):
		стены и помещения (слой основной) и выбор материалов
		предметы
		двери и телепорты
		среда в коридорах и источники среды
		секретные объекты, ловушки, ложные стены
		враги, монстры
	8. стабилизация среды и установка "метки времени"
	9. размещение своих объектов и других игроков, если они есть
управление:
	сделано:
		стрелки или WASD - поворот или движение
		(admin)F - включить-выключить туман войны
		Q, E - уменьшить или увеличить масштаб
		(admin)SPACE - пропустить уровень +1
		M - включить-отключить сканнер (радар, миникарта)
		P - pause or quit
	еще можно:
		P - pause or quit or main_menu(добавить описание задания)
		H - переключение между пилотом и  дроном
		С - смена активного предмета
		J - использовать предмет
		I - инвентарь, подробная информация о статусе, заданиях, достижениях, статистике
		
		O - смена режимов карты, например переключение между подсветкой объектов и типами сред
		G - зацепить

отображение:
в верхней части карта
ниже 3 блока:
	левый - параметры пилота, середина - параметры дрона, правый - миникарта
еще ниже - последнее сообщение
на планшете нижняя часть может быть использована для наложения элементов управления (стрелки для движения и поворота, использование предметов, смены режима карты)

правила игры на данный момент:
ок - лабиринг генерируется по алгоритму обратного распространения, с единственным путем прохождения
ок - игрок попадает в лабиринт слева-вверху
после этого в лабиринт вносяться дополнения (появление циклов, предметов, роботов, ловушек, телепортов, лифтов, кастомных помещений)
частично - после этого рисуется лабиринт и игрок, учитывая туман войны
частично - игрок ходит по лабиринту, выполняет действия
ок - после прохождения генериться новый лабиринт

осталось:
1. Как правильно и секьюрно делать авторизацию
2. Как работать с базой (файловой например)
ok 3. Описать мир и правила игры
4. Как работать с графикой (спрайты, эффекты)
5. Как работать с музыкой и звуками
ok 6. Как резделять на модули и импортировать их (сейчас все в одном текстовом файле)
7. kivy -> apk on android
8. туман войны у пилота нормальный с оценкой стен и коридоров по направлению взгляда.
9. прорисовать игрока нормально, стены и пол (пока временные картинки, нужно свои сделать)
10. разобраться как сделать real-time
ok 11. сделать большой размер лабиринта
ok 12. игрока фокусировать по центру , кроме случаев когда он близко к краю
ok 13. на экране часть лабиринта, с учетом масштаба и его можно менять
ok 14. можно менять масштаб, изменяя cellsize, но только, чтобы карта была не меньше экрана
ok 15. картинки генеряться заранее и для разного масштаба
!16. внизу сделать миникарту-радар
ok 17. непрерывное нажатие кнопок реализовать через проверку по времени и проверку состояния pygame.key.get_pressed() а не считывание очереди
ok 18. промерять этапы - прорисовку, обработку событий и пересчет логики за ход. 
	Время разбить на равные тики (50 тиков в сек, например). Каждое действие длится определенное количество тиков. Например движение от одного поля к другому 0.2сек=10 тиков. Описывается в dict cooldown[]
	loop
		if pygame.key.get_pressed([pygame.K_a]) and action[1]=0: action=('MOVE',10), просчитывается движение. 
		clock.tick(50)
		action[1]-=1
	endloop
19. все вызовы функций по возможности сделать без использования глобальных переменных (почти нереально)
20. подумать как реализовать поворот и направление игрока (сохранять еще вектор последнего движения в MOVE)
!21. среду накладывать переключателем, чтобы видно было в один момент только один вид среды (пока накладывается синей линией сверху поля в % отношении от максимальной концентрации)
!22. сделать меню, где можно посмотреть описание настроек, изменить настройки, перезапустить игру, сохранить игру, загрузить игру. Состояние после каждого уровня, включая статистику, предметы, параметры игрока.
	main_menu():
	ok start(mainloop())
	ok quit(quit_game())
	ok continue (if mazelevel>0: upgrades(), mainloop())
	ok load player (проверка что файл есть, загрузка maiznumber, player_expirience, инициализация лабиринта, возврат в main_menu)
	ok save player (сохранение maiznumber, player_expirience)
	ok upgrade player (if exp>0: screen for upgrade)хот
	осталось: показывать инвентарь, upgrade drone
23. в меню сделать выбор уровня сложности (размер лабиринта, больше-меньше коридоров, больше-меньше предметов и т.п.)
24. сделать динамику стен (моргают, например лампочки)
ok 25. разобраться с полупрозрачностью, для наложения объектов на коридоры
26. сделать плавное движение между полями для пилота (надо запоминать предыдущее местонахождения или направление и передавать в необязательный атрибут act/speed)
26а. сделать плавное движение между полями для врагов и двигающихся блоков (надо запоминать предыдущее местонахождения или направление и act/speed)
ok 27. Режимы масштабов подбирать по размеру лабиринта и экрана. Если экран 1500, размер 75, то минимальный масштаб ячейки = 20.
ok 28. Первичную генерацию монстров перенести с начала в функцию startobjects() , чтобы у уровней могло быть разное число мостров и разная сложность
ok 29. Ограничить движение монстров, чтобы не могли выйти за пределы enemy_move()
30. сделать движение монстров в зависимости от режима. Запоминать направление. Режимы: state(0 - случайное блуждание, 1 - от края до края, 2 - нападение, 3 - убегает, 4 - стоит)
	0 - сделано
ok 31. сделать взаимодействие с монстрами (2 массива изменять maze_objects и enemy) - проверку на столкновение в enemy_move() и проверку на движение в них gameloop()
ok 32. Сделать матрицу уровней игры, при прохождении менять параметры уровня игры из матрицы
ok 33. сделать апгрейд параметров персонажа в зависимости от уровней и после этого переделать матрицу уровней
34. вынести все параметры в отдельный файл и загружать его перед стартом игры (глобальные параметры, параметры игрока, параметры врагов, параметры cooldown, тики, экрана)
35. перерисовку оптимизировать: понять, как использовать графическую карту
36. перерисовку оптимизировать: не перерисовывать весь экран каждый тик, а только то, что изменилось (движение, движение врагов и т.п.) 
37. сделать при генерации лабиринта случайную вставку заранее заготовленных комнат , при этом в них могут быть сгенерированы дополнительные монстры
38. сделать монстров, которые могут проходить сквозь стены
39. Среда - кислород.
	Сделано: генерация среды, изменение среды со временем, генерация ям вместо стен, на яму нельзя зайти, утекание среды в яму
	Сделано: изменение среды стабилизируется из-за деления на 4, надо чтобы уходило до 0
	Сделано: генерация ям и кислорода по уровням, дыхание внешним кислородом, подзарядка скафандра кислородом при высокой концентрации с затратой энергии
	Надо: взаимодействие с ямами(закрыть двигающимся), отрисовку ям (найти изображение получше)
	Надо: генерация "генераторов кислорода", тратят для работы небольшое количество энергии, генераторы можно включать и выключать (т.е. есть 2 значения в таблице), создают вокруг себя постоянно высокую концентрацию кислорода
40. Описание задания перед уровнем и по нажатию клавиши P
41. Сделать кнопку help в main_menu для показа подсказки
42. Перенести на git (свой сервер) или heroku (free private mode)
!43. Сканнер(радар) - показывается справа внизу, вызовом displayscanner(scanner_mode,tick) на каждый тик
	сделано: проверка тика (пересчет картинки только если 0, иначе показывает старую), включить/выключить сканнер кнопкой M
	надо: внести управление включением и отключением сканнера, управлять радиусом обзора (пока просто половина карты, а надо в player_upgrades), условия для разных сред (сейчас не проверяется и делается только "кислород").
44. Сделать стрельбу:
	Сделано: у игрока есть направление, куда он смотрит, по последнему движению
	Надо: оружие, урон, в первом варианте мгновенный урон по первому врагу по направлению, по нажатию кнопки ENTER, прорисовка взрыва, cooldown между выстрелами (при этом можно двигаться)
	Надо: скорость полета снаряда, дальность полета снаряда, количество снарядов в полете, количество снарядов в запасе, смена оружия, прорисовка полета снаряда. 
	
	player_direction='RIGHT','LEFT','UP','DOWN' и directions[player_direction]=[dx,dy] дает вектор полета или движения
	cooldown['FIRE']=10 , но при этом не влияет на act, чтобы можно было одновременно с выстрелом двигаться
	upgrades - 'FIRE COOLDOWN' снижение частоты между выстрелами
	player_action - 'FIRE' - статистика выстрелов, 'FIRE ON ENEMY' - статистика попаданий
	weapons:
		типы вооружения (type(номер типа)
		effect(физический точечный, энергетический точечный, разрывной с радиусом поражения)
		damage
		speed(сколько тиков проходит через одно поле)
		cooldown(сколько тиков минимум между выстрелами)
		range(сколько тиков максимально в полете)
		bullets (максимальное количество снарядов в оружии))

уровни игры:
ок 1. простой лабиринт, надо пройти от одного угла к другому (отслеживание MOVE)
!2. ДВИГАЮЩИЕСЯ БЛОКИ лабиринт с блоками, которые можно толкать или тащить (надо отслеживать при MOVE+PUSH что есть блок и что за ним если толкать, при MOVE+PULL что блок зацеплен и что есть куда ходить, и action GET - зацепить)
	осталось: блоки PULL и зацепление блока
3. ДВЕРИ лабиринт с дверями, их можно открывать (отслеживать MOVE в сторону двери, оставаться на месте, дверь открывается) и они автоматически закрываются (отслеживать MOVE в сторону от от двери). Некоторые двери имеют замки (отслеживать при открытии наличие ключа, тип двери меняется при открытии, некоторые могут открываться навсегда)
ок 4. ЭНЕРГИЯ И КИСЛОРОД лабиринт, в котором надо найти и собрать все предметы, например определенного типа. Например у игрока есть энергия, ее надо пополнять, он тратиться с движением. Есть воздух - он тратиться со временем. Если до выхода что-то закончиться - то игра не пройдена. 
!5. ВАКУУМ генераторы кислорода и 2 перемешивающиеся среды - вакуум и воздух. Когда воздух разрежен, начинает тратиться воздух в скафандре. Когда воздуха много, скафандр пополняет воздух до 100%, при этом тратит энергию для всасывания. Среда пересчитывается каждый тик. Генератор кислорода постоянно создает на своем поле высокую концентрацию кислорода. На миникарте можно видеть уровень концентрации кислорода (синий цвет разной тональности).
!6. ВРАГИ, МИНЫ И БЛИЖНИЙ УРОН. Игрок имеет здоровье. Скафандр имеет броню, поглощающую % от урона и расходуемая как здоровье во время нападения. Есть аптечки со здоровьем. На карте появляются враги(монстры), которые перемещаются, у них есть скорость, уровень агрессии, урон, здоровье. Когда они нападают расходуется здоровье и броня. У игрока есть оружие ближнего боя, которое отвечает во время атаки врага. Можно устанавливать мины. Мины могут быть двух типов - реагирующие на движение врага (на своих не реагирует) и взрывающиеся по таймеру через определенное количество тиков. В лабиринте есть объекты: аптечки, оружие ближнего боя с разным уроном, усилители брони(восстанавливают часть ресурса брони) , враги, незаряженные мины. 
	сделаны рандомно перемещающиеся враги
	отслеживается столкновение врага и нападение на врага, взаимный урон, game over и выбывание врагов
	сделана матрица типов, выбор в startobjects() [x,y,10,0,0,0,1,5,False] #enemy x,y,speed(act=10),act,state(random=0),type,heal,damage,killed
	добавлена аптечка
	!надо: больше типов врагов ближнего боя (уже есть 3 штуки) и картинок к ним, разное поведение
7. РАЗРУШЕНИЕ СТЕН И ДАЛЬНИЙ УРОН Появляются стены, которые могут быть разрушены. Разрушить можно взрывом от мины. Можно собрать оружие дальнего боя. И игрока есть направление, в котором он смотрит. Если он двигается, то направление по пути движения. Если надо развернутся, то вместо движения в другую сторону происходит поворот. Можно использовать мышь для нацеливания на врага. Тогда поворот происходит автоматически в направлении мышки.
8. ПИЛОТ И ДРОН кроме пилота есть дрон, на которого можно переключаться. Одновременно можно управлять только кем-то одним.  У дрона есть радиус, на который он может уходить от пилота. Дальше сигнал теряется и он останавливается. Дрону не нужен кислород, он может перемещаться в вакууме постоянно. У него есть только броня, энергия (намного больше чем у пилота, в зависимости от конфигурации), встроенное энергетическое оружие, расходующее энергию. У дрона есть радар, сканирующий либиринт по радиусу (расширенный туман войны). Есть ретрансляторы которые можно собирать и устанавливать, они увеличивают радиус связи с дроном.
9. МАСТЕРСКАЯ. По лабиринту разбросаны различные электронные компоненты. Собирая их в мастерскую, можно производить ремонт дрона и апгрейд его способностей и характеристик. Например: усиление брони, увеличение емкости и эффективности батарей, ускоренное шасси, больший радиус радара, устойчивость в опасным средам (вода, огонь, кислота), умение взламывать устройства, усиленное энергетическое оружие.
10. ЛЕКАРСТВО И ЯД. Монстров можно отравить распылив газ. Есть монстры, которые сами распыляют ядовитый газ. Есть антидот, используется при отравлении газом. Можно установить или включить очистители воздуха, быстро всасывающие газ.
11. МНОГОЭТАЖКА. Лабиринт имеет несколько этажей. Между этажами есть лифты. Кроме того, встречаются порталы. Нижний этаж затоплен. Там есть ямы, в которые может утекать вода. Выход находится на нижнем этаже.
еще примеры уровней:
12. нет objects_oxygen, дышать можно только внешней средой, тратя энергию на сбор
13. нет objects_oxygen, много энергии вокруг, куча дыр, надо собирать энергию, включать и отключать генераторы кислорода, чтобы дойти до конца
14. надо найти всех врагов и уничтожить
15. враг типа "среда", распространяется почкованием вместо движения, поглощает кислород из внешней среды, выделяет ядовитый газ
	слизевик: простейший организм с самоорганизацией. Двигается пульсациями жидкости по проложенным каналам внутри суперклетки. Двигается в сторону еды и в поисках еды. При недостатке еды выращивает плодовое тело со спорами, похожее на гриб.
	как реализовать: питание - матрица слизевика, матрица кислорода (питание), матрица убитых врагов, распространяет тело по всем коридорам. Если пищи мало - образует ядовитые споры, убивающие врагов и дальше слизевик их поедает.
16. custom , есть готовые коридоры прямоугольниками из двигающихся блоков, по всей карте, надо закрыть все ямы и стабилизировать затраты кислорода, пока он не закончился

развитие игрока(пилот):
ОСНОВНЫЕ ПАРАМЕТРЫ
скорость (количество тиков, требующихся на ход, в том числе с учетом скафандра, выше вероятность увернуться от атак ближнего боя)
восприятие (радиус тумана войны и точность стрельбы дальним уроном)
выносливость (эффективность использования кислорода, устойчивость в ядовитому газу, больше здоровья)
удача (чаще генерируются полезные объекты, либо если низкая - чаще генерируются опасные монстры)
интеллект (высокий дает возможность взлома без дрона, владение энергетическим оружием, возможность установки имплантов, улучшающих параметры)
сила (больше здоровья, возможность носить более крупное оружие и броню и больше предметов, больше урон ближнего боя)

игрок распределяет свои основные параметры, которые влияют на все действия и другие характеристики. 
Игрок получает опыт и уровни.
С каждым уровнем он может их немного увеличивать.
так же он может использовать имплант для их временного увеличения, пока он установлен.
Опыт можно получать:
	Убийства монстров и врагов.
	Убийство других игроков.
	Достижения.
	Выполнение заданий (надо придумать квесты со временем).
	Нахождение секретов.
	Выполнение различных действий.
	Степень открытия карты.
Невозможно прокачать за короткое время все параметры на максимум, нужно много и разнообразно играть.

развитие игрока(дрон):
ОСНОВНЫЕ ПАРАМЕТРЫ
есть несколько базовых конфигураций шасси, генератора, сенсорной системы и блока управления. В них можно устанавливать дополнительные модули в мастерской.
шасси - повышает скорость, объем переносимой массы
генератор - объем и эффективность распределения энергии
Броня - дает различные типы защиты
сенсорная система - улучшение восприятия среды, дальность ретрансляции сигнала
блок управления - вычислительная мощность, объем памяти и канала передачи данных. 

Невозможно сразу выбрать все топовые модели. Масса увеличивает нагрузку на шасси. Блок управления, шасси и сенсорная система тратят энергию.
Дрон получает опыт и уровни как пилот.
С каждым уровнем увеличиваются возможности блока управления, дрон обучается выполнять алгоритмы более эффективно, может использовать больше памяти, а значит контролировать больше модулей в своей структуре.
Каждая из компонент дрона требует содержит модули, их количество не может быть больше возможности блока управления.
Например:
шасси - 1 модуль
генератор - 4 модуля (питание для 4 других компонент стандартной мощности)
броня - 3 модуля (физическая защита с 3 сторон)
сенсорная система - 2 модуль (зрение, радио)
всего модулей = 1+4+3+2=10
стандартный блок управления - поддерживает управление от 10 (база) до 15 модулей. Т.е. в начале больше ничего не установить. При получении опыта, СУ сможет управлять 15 модулями, дальше ее придеться менять.

вопросы:
Нужно ли вводить деньги и магазин (например на центральной станции и до нее еще добраться надо)? (например там продавать генераторы, оружие и боеприпасы, компоненты, заказывать квесты)
Что делать с респавном при убийстве и предметами?
Что делать с майнингом и крафтингом? (например при убийствах могут выпадать кристаллы или другие материалы для крафтинга)
насколько большой должна быть вся карта действий и как устроена?

формула расчета опыта(версия 1):
player_action={'MOVE':0,'FIRE':0,'FOG':0, 'PICK':0} #player action counts. statistics
expirience=player_action['PICK']*100+player_action['FOG']+player_action['MOVE']+player_action['KILL']*100+int(player_oxygen)+int(player_energy)+int(player_heal)
при запуске уровня:initplayer()->starttime=time.clock()
после прохождения уровня: timebonus=int((grid_x*grid_y)/(time.clock()-starttime))
тест:
79*45, fog=3,oxygen=5,energy=30,randomcicles=200 -> exp=3800 time=250 sec timebonus=14


------------------
другие заметки:
клиент:
установление соединения с сервером (PodSixNet)
авторизация на сервере
получение карты с сервера
отображение карты в окне (pygame)
взаимодействие с картой и передача на сервер действий и контекста клиента

сервер:
запуск сервера (PodSixNet)
генерация карты на сервере
авторизация клиента
передача карты на клиент в зависимости от контекста
получение от клиента действий, проверка и реакция на действия

протокол:
PodSixNet
https://github.com/chr15m/PodSixNet/tree/python3
https://github.com/chr15m/PodSixNet/archive/python3.zip
The module is found inside a subdirectory called PodSixNet within the top level folder. There's an __init__.py inside there, so you can just copy or symlink the PodSixNet sub-directory into your own project and then do import PodSixNet, or else you can run "sudo python setup.py install" to install PodSixNet into your Python path. Use sudo python setup.py develop if you want to stay up to date with the cutting edge and still be able to svn/bzr up every now and then.

client -> server
server -> client


surface:
displaysurface=pygame.display.set_mode((x,y))
surface = pygame.image.load('foo.png').convert() #about a 6x increase in blitting speed by calling convert().
pygame.display.update() – This updates the whole window (or the whole screen for fullscreen displays).
pygame.display.flip() – This does the same thing, and will also do the right thing if you’re using doublebuffered hardware acceleration, which you’re not, so on to...
pygame.display.update(a rectangle or some list of rectangles) – This updates just the rectangular areas of the screen you specify.
rect = pygame.Rect(x, y, width, height)

surface.set_colorkey(color), where color is a rgb tuple – say (0,0,0). This would make every pixel in the source image transparent instead of black
Alpha’ is different, and it comes in two flavors. ‘Image alpha’ applies to the whole image, and is probably what you want. Properly known as ‘translucency’, alpha causes each pixel in the source image to be only partially opaque. For example, if you set a surface’s alpha to 192 and then blitted it onto a background, 3/4 of each pixel’s color would come from the source image, and 1/4 from the background. Alpha is measured from 255 to 0, where 0 is completely transparent, and 255 is completely opaque. Note that colorkey and alpha blitting can be combined – this produces an image that is fully transparent in some spots, and semi-transparent in others.
‘Per-pixel alpha’ is the other flavor of alpha, and it’s more complicated. Basically, each pixel in the source image has its own alpha value, from 0 to 255. Each pixel, therefore, can have a different opacity when blitted onto a background. This type of alpha can’t be mixed with colorkey blitting, and it overrides per-image alpha. Per-pixel alpha is rarely used in games, and to use it you have to save your source image in a graphic editor with a special alpha channel. It’s complicated – don’t use it yet.

http://www.pygame.org/docs/ref/surface.html
