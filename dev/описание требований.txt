
идея для игры:
RPG (ролевая модель персонажей, возможность развивать персонажей в различных направлениях)
крафтинг + майнинг (создание и поиск предметов)
создание карт (случайный алгоритм генерации + кастомный с вставкой заготовленных элементов + на базе картин)
AI (наличие искусственного интеллекта)
мобильные сенсоры (получение и использование сигналов от акселерометра, gps, сенсорного экрана)
AR (дополненная реальность - не только привязка к месту и карте, но и к событиям в реальной мире, статистическим данным из мира, например погода, ландшафт, плотность населения, траффик)
pvp (возможность устаривать бои между людьми)
cooperate (возможность кооперативного режима игры двумя людьми, группой лиц, объединение к альянсы)

идеи для мультиплеера:
несколько ролей - для человека и дрона
глобальный или локальный босс - например резервуары для разрастающейся слизи
форт на местности для себя и своей группы
фракции - прогресс против наследия. Игроки прогресса - при респавне оживает их клон. Игроки наследия - при респавне идет генетическое изменение и оживает немного измененный персонаж.

станция (база, по которой можно перемещаться)+космос(враждебная среда):
управление двумя персожами - пилот и дрон
границы враждебной среды могут меняться (лабиринг и двери)
может быть несколько режимов игры:
	защита базы - нужно удержать оборону извне
	спасение базы - часть базы захвачено, надо пройти по ней и все зачистить и настроить нормальную среду обитания
	добраться до базы - перемещение по враждебной среде между точками где есть ресурсы до входа в базу
может быть несколько этажей
могут быть секретные уровни
может быть несколько разных сред с разной степенью опасности:
	ok вакуум
	ok кислород
	опасный ядовитый газ
	биоатака, заражение
	вода и затопление водой
	лава, огонь и затопление лавой
может быть разный вид:
	пилот - от первого лица, например с AR
	дрон - вид на карту сверху
может быть разный "туман войны":
	дрон - видит вибрации, поля, опасную среду, излучения, может взламывать устройства, оружие модульное и энергетическое
	пилот - может использовать маскировку от дрона, видит вдоль коридоров,  использует ручное оружие, возможно использование имплантов расширяющих восприятие
ok среда:
	среда имеет скорость распространения и ее плотность меняется из более плотной в менее плотную дискретными единицами (т.е. в сторону меньшего значения)
	среда составляет отдельную маску над картой коридоров, как и "туман войны"
	изменение среды происходят по cooldown
	изменения среды работают по принципу клеточных автоматов, например для кислорода - распространение в 4 стороны равномерным распределением, поглощение кислорода при малой концентрации или если есть яма(hole)
объекты:
	ok - maze_objects[][], maze[][]=0 пустой коридор
	ok - maze_objects[][], maze[][]=1 постоянная стена
	ok - maze_objects[][]=2 энергия (+50% к энергии скафандра или дрона)
	ok - maze_objects[][]=3 кислородный баллон (+50% к запасу кислорода скафандра)
	ok - maze_objects[][]=4 стена перемещаемая (можно тянуть и толкать)
	ok - maze_objects[][]=5 враг, монстр (различаются набором параметров  и поведением) типы: enemy_type враги: enemy
	ok - maze_objects[][]=6 аптечка (+50% к здоровью пилота)
	ok - maze_objects[][]=7 яма (в нее может утекать среда, например кислород)
	ok - maze_objects[][]=8 патроны (+50) от small gun
	ok - maze_objects[][]=9 патроны (+50) от minigun
	ok - maze_objects[][]=50 генератор энергии - место подзарядки (для дрона или скафандра)
	ok - maze_objects[][]=51 генератор здоровья - место лечения (для пилота)
	ok - maze_objects[][]=52 генератор кислорода (от него распространяется среда - кислород)
	!! - maze_objects[][]=53 генератор slime (от него и от убитых врагов питается slime)
	!! - maze_objects[][]=54 генератор воды (от него распространяется среда - вода)
	источник лавы
	источник биоопасности
	источник опасного газа
	стена неразрушаемая (разного типа)
	стена разрушаемая (разного типа)
	дверь закрытая, открывается move в ее сторону
	дверь открытая, закрывается move от нее
	дверь открываемая ключом (становиться обычной дверью)
	ключ от двери
	дрон
	пилот
	лифт (переход между двумя этажами)
	оружие ближнего боя (пока есть только урон)
	оружие дальнего боя
	боеприпасы (пока есть только простые патроны от small gun)
	устройство (выполнение особой функции заданной для выполнения квеста, хранение контента)
	ловушка (единоразово наносит урон или накладывает эффект, можно увидеть заранее, если иметь сканер)
	портал (может быть односторонним или двухсторонним, в нем записана координата, например может быть использован для телепортации в секретную локацию), хранить в отдельном массиве связи и переходы
	стационарный сканер (показывает карту в определенном месте, определенного радиуса)
	усилитель брони (+50% к восстановлению брони скафандра или дрона)
	мина неактивная
	мина заряженная с таймером
	мина активируемая при приближении
	ретранслятор (при активации увеличивает радиус связи пилота и дрона)
	электронные компоненты (нужны для апгрейда дрона в мастерской)
	мастерская (место апгрейда дрона)
	антидот (спасает от заражения воздуха газом)
	очиститель воздуха (поглощает высокие концентрации ядовитого газа)
параметры персонажа:
	координаты
	action statistics
	туман войны
	здоровье
	запас ресурса скафандра - кислород (запас восстанавливается или тратится при наличии или отсутсвии среды "кислород"), броня физическая, броня силовая, энергия.
	предметы (оружие, боеприпасы, сканер, другое)
	активный предмет (например оружие)
	состояние - заражение, парализован, ослеплен, отравлен
враги:
	1 тип ближнего боя - блуждают, агряться при приближении
	2 тип ближнего боя - стоят, агряться при приближении, взрываются при контакте, можно взорвать на расстоянии
	3 тип ближнего боя - плесень, быстро размножаются в воздушной среде, поглощают кислород, выделяют яд, расползаются по свободному пространству, горят
	1 тип дальнего боя - блуждают, агряться при приближении, идут или стреляют
	2 тип дальнего боя - стоят,  агряться при приближении, стреляют далеко
	3 тип дальнего боя - блуждают, пугаются при приближении, бегут и отстреливаются
генерация карты:
	0. проверка, что в этом месте еще не было карты. Если карта старая, она частично меняется. Чем старше, тем сильнее меняется.
	1. выбор уровня сложности
	2. выбор мест выхода
	3. сшивание с соседними блоками, если есть (например генерация блоков 100 на 100, по каждому краю несколько проходов в соседний блок, блоков например 3 на 3 и дополнительно наличие нескольких этажей)
	4. выбор размера матрицы
	5. выбор алгоритма генерации лабиринта (несколько алгоритмов, использующих разный паттерн)
	6. размещение помещений. Готовые custom уровни, разного размера, формы, которые дополнительно поворачиваются и отражаются перед накладыванием на карту. Помещения разные для разных уровней и встречаются с разной частотой и разным наполнением.
	7. размещение объектов (дополнительные слои):
		стены и помещения (слой основной) и выбор материалов
		предметы
		двери и телепорты
		среда в коридорах и источники среды
		секретные объекты, ловушки, ложные стены
		враги, монстры
	8. стабилизация среды и установка "метки времени"
	9. размещение своих объектов и других игроков, если они есть
	10. При генерации случайных объектов учитывать чтобы custom куски, точки выхода и монстры не затирались
управление:
	сделано:
		стрелки или WASD - поворот или движение
		(admin)F - включить-выключить туман войны
		Q, E - уменьшить или увеличить масштаб
		(admin)SPACE - пропустить уровень +1
		M - включить-отключить сканнер (радар, миникарта)
		P - pause or quit
		F11 - sound on/off
		левая кнопка мыши - стрелять, 4 направления, определяется в зависимости от местонахождения игрока
		P - pause or quit or main_menu(добавить описание задания)
		С - смена активного предмета
		ENTER - использовать предмет, включить/выключить генератор
	еще можно:
		H - переключение между пилотом и  дроном
		I - инвентарь, подробная информация о статусе, заданиях, достижениях, статистике
		O - смена режимов карты, например переключение между подсветкой объектов и типами сред
		G - зацепить

		
отображение:
в верхней части карта
ниже 3 блока:
	левый - параметры пилота, середина - параметры дрона, правый - миникарта
еще ниже - последнее сообщение
на планшете нижняя часть может быть использована для наложения элементов управления (стрелки для движения и поворота, использование предметов, смены режима карты)

правила игры на данный момент: см. help.txt
ок - лабиринг генерируется по алгоритму обратного распространения, с единственным путем прохождения
ок - игрок попадает в лабиринт слева-вверху
ок - после этого в лабиринт вносяться дополнения (появление циклов, предметов, роботов, ловушек, телепортов, лифтов, кастомных помещений)
ок - после этого рисуется лабиринт и игрок, учитывая туман войны
ок - игрок ходит по лабиринту, выполняет действия
ок - после прохождения генериться новый лабиринт
что пока расширяем:
больше объектов на карте
больше действий, умений и ролей игрока
больше разных заданий
больше разных врагов
больше сред (клеточные автоматы)
больше вещей в inventory (новое оружие)
больше разных локаций


сделано:
ok 3. Описать мир и правила игры
ok 6. Как резделять на модули и импортировать их (сейчас все в одном текстовом файле)
ok 10. разобраться как сделать real-time (tick and cooldown для разных действий)
ok 11. сделать большой размер лабиринта
ok 12. игрока фокусировать по центру , кроме случаев когда он близко к краю
ok 13. на экране часть лабиринта, с учетом масштаба и его можно менять
ok 14. можно менять масштаб, изменяя cellsize, но только, чтобы карта была не меньше экрана
ok 15. картинки генеряться заранее и для разного масштаба
ok 17. непрерывное нажатие кнопок реализовать через проверку по времени и проверку состояния pygame.key.get_pressed() а не считывание очереди
ok 18. промерять этапы - прорисовку, обработку событий и пересчет логики за ход. 
	Время разбить на равные тики (50 тиков в сек, например). Каждое действие длится определенное количество тиков. Например движение от одного поля к другому 0.2сек=10 тиков. Описывается в dict cooldown[]
	loop
		if pygame.key.get_pressed([pygame.K_a]) and action[1]=0: action=('MOVE',10), просчитывается движение. 
		clock.tick(50)
		action[1]-=1
	endloop
ok 25. разобраться с полупрозрачностью, для наложения объектов на коридоры
ok 27. Режимы масштабов подбирать по размеру лабиринта и экрана. Если экран 1500, размер 75, то минимальный масштаб ячейки = 20.
ok 28. Первичную генерацию монстров перенести с начала в функцию startobjects() , чтобы у уровней могло быть разное число мостров и разная сложность
ok 29. Ограничить движение монстров, чтобы не могли выйти за пределы enemy_move()
ok 31. сделать взаимодействие с монстрами (2 массива изменять maze_objects и enemy) - проверку на столкновение в enemy_move() и проверку на движение в них gameloop()
ok 32. Сделать матрицу уровней игры, при прохождении менять параметры уровня игры из матрицы
ok 33. сделать апгрейд параметров персонажа в зависимости от уровней и после этого переделать матрицу уровней
ok 34. вынести все параметры в отдельный файл(модуль from module import *) и загружать его перед стартом игры (глобальные параметры, параметры игрока, параметры врагов, параметры cooldown, тики, экрана)
ok 40. Описание задания перед уровнем и по нажатию клавиши P
ok 41. Сделать кнопку help в main_menu для показа подсказки
ok 42. Перенести на git (свой сервер или github) , пока локально и на https://github.com/satrum/maze
ok 51. В матрице уровней изменить настройку уровня монстров.
	Сделано: выбирать не максимальный уровень, а список уровней
	Сделано: в генерации монстров startobjects() учитывать список уровней монстров
	Такая система позволит делать разные наборы врагов с разной тактикой
ok 55. Вынести процедуру запуска уровня в отдельную функцию:
	теперь генерация уровня после нажатия кнопки (start, continue)
	def startlevel():
		global maze, maze_objects, maze_oxygen
		#init:
		mazelevels_update(mazenumber) #считывание глобальных параметров уровня
		maze=startmaze() #generate maze
		maze_objects=startobjects() #generate array of objects
		initplayer() #init to default player with upgrades and fog
		maze_fog_update(player_x,player_y) #update fog at player position
		maze_oxygen=start_env(concentration_oxygen) #generate oxygen
ok - показывать временно трупы врагов, enemy_blood_timer=60
ok - показывать при game over текст из-за чего игра окончена
ok - переключение inventory кнопкой С (например, смена оружия)

осталось:
1. Как правильно и секьюрно делать авторизацию
2. Как работать с базой (mongoDB будет, отдельный модуль, бэкапы, инициализация, авторизация, генерация коллекций с лабиринтами)
4. Как работать с графикой (спрайты, эффекты)
!5. Как работать с музыкой и звуками
	Сделано: инициализация, чтобы не было лагов - буфер не делать большим
	Сделано: включение и отключение звуков клавишей F11
	в первую очередь нужны звуки:
	выстрел 0 500
	шаг 1 200
	толкание стены
	столкновение с врагом
	враг умирает
	генератор включен
	генератор отключен
	начало уровня
	конец уровня (удачно)
	конец уровня (выход пока не открыт)
	game over
	music - main menu
	music - gameplay
7. kivy -> apk on android
8. туман войны у пилота нормальный с оценкой стен и коридоров по направлению взгляда.
9. прорисовать игрока нормально, стены, пол, предметы (пока временные картинки, нужно свои сделать)
!16. внизу сделать миникарту-радар, размер поля с информацией задавать в переменной.
19. все вызовы функций по возможности сделать без использования глобальных переменных (почти нереально)
-20. подумать как реализовать поворот и направление игрока (сохранять еще вектор последнего движения в MOVE)
	сделано: направление есть, по последнему движению
	надо: направление меняется вместо движения при повороте с cooldown, а потом идет движение, если клавиша еще нажата (возможно не нужно, используеться мышь для предметов)
!21. среду накладывать переключателем, чтобы видно было в один момент только один вид среды (пока накладывается синей линией сверху поля в % отношении от максимальной концентрации)
!22. сделать меню, где можно посмотреть описание настроек, изменить настройки, перезапустить игру, сохранить игру, загрузить игру. Состояние после каждого уровня, включая статистику, предметы, параметры игрока.
	main_menu():
	ok start(mainloop())
	ok quit(quit_game())
	ok continue (if mazelevel>0: upgrades(), mainloop())
	ok load player (проверка что файл есть, загрузка maiznumber, player_expirience, инициализация лабиринта, возврат в main_menu)
	ok save player (сохранение maiznumber, player_expirience)
	ok upgrade player (if exp>0: screen for upgrade)хот
	ok helpscreen() (показывает help.txt)
	ok по нажатию на P можно вернуться в главное меню (сброс уровня)
	ok показывать описание уровня текущего, параметры и задачу
	осталось: показывать инвентарь, upgrade drone
	осталось: в главном меню выбирать уровень (с 0 по тот, на котором остановился)
	осталось: показывать достижения
23. в меню сделать выбор уровня сложности (размер лабиринта, больше-меньше коридоров, больше-меньше предметов и т.п.)
24. сделать динамику стен (моргают, например лампочки)
!26. сделать плавное движение между полями для пилота (надо запоминать предыдущее местонахождения или направление и передавать в атрибут act)
	 сделать плавное движение между полями для врагов и двигающихся блоков (надо запоминать предыдущее местонахождения или направление и act)
	 Сделано: плавное движение игрока, плавное движение всей карты
	 Сделано: плавное движение врагов, есть проблема при нападении на игрока, нужно проверять было ли движение
	 !Надо исправить: Плавность сделать в момент перехода из центрального положения в положение движения к краю лабиринта
	 !Надо: плавное движение блоков
!30. сделать движение монстров в зависимости от режима. Запоминать направление. Режимы: state(0 - случайное блуждание, 1 - от края до края, 2 - нападение, 3 - убегает, 4 - стоит, 5 - ищет путь)
	0 - сделано random
	1 - сделано block to block
	2 - сделано agressive mode
	3 - сделано affraid mode (например для уровней где надо перебить врагов)
	Надо: возможно стоит добавить радиус на котором начинает срабатывать 2 и 3
	Надо: поиск пути - например для боссов
	!!!Надо: волновой алгоритм расчета пути с разной глубиной рекурсии проверяющий на минимум расстояния на последнем шаге, без повторов и выбирающий следующий шаг.
35. перерисовку оптимизировать: понять, как использовать графическую карту
36. перерисовку оптимизировать: не перерисовывать весь экран каждый тик, а только то, что изменилось (движение, движение врагов и т.п.) 
37. сделать при генерации лабиринта случайную вставку заранее заготовленных комнат , при этом в них могут быть сгенерированы дополнительные монстры
38. сделать монстров, которые могут проходить сквозь стены
!39. Среда - кислород.
	Сделано: генерация среды, изменение среды со временем, генерация ям вместо стен, на яму нельзя зайти, утекание среды в яму
	Сделано: изменение среды стабилизируется из-за деления на 4, надо чтобы уходило до 0
	Сделано: генерация ям и кислорода по уровням, дыхание внешним кислородом, подзарядка скафандра кислородом при высокой концентрации с затратой энергии
	Сделано: генерация "генераторов кислорода", генераторы можно включать и выключать, создают вокруг себя постоянно высокую концентрацию кислорода
	Надо: взаимодействие с ямами(закрыть двигающимся), отрисовку ям (найти изображение получше)
	Надо: когда везде закончился кислород - останавливать пересчет (т.е. вести статистику оставшегося на уровне)
!43. Сканнер(радар) - показывается справа внизу, вызовом displayscanner(scanner_mode,tick) на каждый тик
	сделано: проверка тика (пересчет картинки только если 0, иначе показывает старую), включить/выключить сканнер кнопкой M
	надо: внести управление включением и отключением сканнера, управлять радиусом обзора (пока просто половина карты, а надо в player_upgrades), условия для разных сред (сейчас не проверяется и делается только "кислород").
	надо: radarsize зависит от уровня игрока, апгрейд для него.
!44. Сделать стрельбу:
	Сделано: у игрока есть направление, куда он смотрит, по последнему движению
	Сделано: оружие, урон, стрельба по нажатию кнопки ENTER, cooldown между выстрелами (при этом можно двигаться), скорость полета снаряда, дальность полета снаряда, количество снарядов в полете, количество снарядов в запасе, смена оружия
	Сделано: прорисовка полета снаряда. 
	Сделано: стрельба по нажатию левой кнопки мышки, расчет направления стрельбы исходя из позиции мышки
	Сделано: ошибка если стрелять вправо в выход bullets_fly(bullets) выдает ошибку выхода за пределы списка, надо проверку на координаты
	Сделано: пули для small gun
	Сделано: gameover - чтобы между уровнями inventory сохранялись, но сбрасывались при gameover
	Сделано: инициализация inventory - save, load
	Сделано: убрать стрелку с направления, они больше не нужны, так как стрельба делается мышкой и убрать стрельбу кнопкой ENTER
	Сделано: апгрейд для возможности носить больше пуль 100% 150% 200% 300% 500% относительно максимума для данного типа вооружений
	Сделано: вести статистику попаданий и показывать точность
	Надо: апгрейд пушки
	Надо: инвентарь игрока, текущий предмет, смена текущего предмета, если оружие то ENTER вызывает выстрел, загрузка и сохранение состояния инвентаря
	Надо: апгрейды для стрельбы
	Надо: уровни со стрельбой(ок), предмет - боезапас(ок), предмет - оружие
	Надо: стрелящих врагов и расчет полета их путь
	Надо: Направлений может быть больше четырех, пуля летит в разные направления.
	Надо: давать "достижения" за точность
	Надо: пули сделать круглыми, если делать разные направления

	player_direction='RIGHT','LEFT','UP','DOWN' и directions[player_direction]=[dx,dy] дает вектор полета или движения
	cooldown['FIRE']=10 , но при этом не влияет на act, чтобы можно было одновременно с выстрелом двигаться
	upgrades - 'FIRE COOLDOWN' снижение частоты между выстрелами
	player_action - 'FIRE' - статистика выстрелов, 'FIRE ON ENEMY' - статистика попаданий
	weapons:
		типы вооружения (type(номер типа)
		effect(физический точечный, энергетический точечный, разрывной с радиусом поражения)
		damage
		speed(сколько тиков проходит через одно поле)
		cooldown(сколько тиков минимум между выстрелами)
		range(сколько тиков максимально в полете)
		bullets (максимальное количество снарядов в оружии))
	оружие:
		ok small gun, minigun - стреляет вперед по одной пуле, тратит пули
		destructor - уничтожает стены
		reflector - стреляет в разные стороны, пули летят отражаясь от стен под углом 45 градусов
		rocket launcher - ракеты при попадании взрывают по площади
		laser - простреливает линию и врагов насквозь, тратит энергию
		swarm gun - облако роящихся дронов вокруг (можно несколько алгоритмов)
	пули тут: https://www.google.ru/search?q=fire+icon&newwindow=1&tbm=isch&tbo=u&source=univ&sa=X&ved=0ahUKEwjorqL0otrSAhUDkSwKHWsEDHkQsAQIHg&biw=1920&bih=950#q=game+bullet&tbm=isch&tbs=rimg:CRupaqmnCreQIjgz67Dxmcr5suqmLcQ9hKY-9P5jHXQTYfODaQcNkLiPhD7O_1Pn59yzN36x556QEHMvkhlnDMYuRzSoSCTPrsPGZyvmyEUD8q0yfRfKdKhIJ6qYtxD2Epj4R1jXX1VOc-TcqEgn0_1mMddBNh8xGO1wG5J47q1CoSCYNpBw2QuI-EEb6m-rsE1kM3KhIJPs78-fn3LM0R5yr_10pQ6a14qEgnfrHnnpAQcyxFphagm-84hFyoSCeSGWcMxi5HNEWV-Ek5hYPXm&*&imgrc=MXFpIxK8H7lUVM:
45. Сделать генератор уровней, чтобы можно было создавать custom уровни
46. Сделать большой уровень, с несколькими этажами и несколькими кусками по 200 на 200 на одной плоскости. Для этого уровня придумать точки регенерации здоровья, кислорода, энергии, врагов и предметов. А также возможность апгрейда:
	Можно например сделать кнопку - survival  - при старте идет уровень например 100, он типа большой, только на нем можно например сделать возврат в главное меню и при старте - не происходит перегенерация уровня, вместо этого игра продолжается. Т.е. условный переход в startlevel() если mazelevel=100 или FLAG.
	сделано: перед этим внедрить генераторы кислорода, энергии и здоровья
	Надо: перед этим внедрить запрос кастомных кусков в карту
	Надо: перед этим внедрить лифты и телепорты
47. Клеточные автоматы (различные типы среды). Расчет делать на отдельном сервере, изменение среды - по cooldown. Есть зависимости среды как от структуры лабиринта, так и от других сред.
48. придумать игре название
49. апгрейд - ENERGY FOR MOVE - снижать затраты энергии при движении (по умолчанию = 5.0/cooldown['TICK'], 1move(10 tick)=-1 energy)
!50. добавить описание уровней (можно увидеть в главном меню а так же при нажатии на кнопку P)
	Сделано: display_level_target(), показывает описание, размер лабиринта, наличие врагов, задание на KILL , BOSS
	Надо: отображать другие среды
	Надо: отображать 'PICK'
52. Маскировка - способность прятаться от агрессии врагов.
!53. Разные типы заданий. Расширить конфигурацию уровней:
	список заданий по уровням: mazelevels_target()
	Сделано: 'KILL' - убить врагов (n) - количество врагов, которых надо убить

	ok 'GOTO' - пройти лабиринт ([first_x,first_y,last_x,last_y]) - точка начала и точка конца. Если [0,0,*,*] - random START. Если [*,*,0,0] - random EXIT. Выход видно.
	Сделано: initplayer() - генерировать игрока по 'GOTO' в начале уровня
		
	ok 'PICK' - собрать все объекты определенного типа (t)
	Сделано: это список, состоящий из списков вида [object,quantity,flag], указывающий тип предмета, его количество и флаг необходимости его собрать, например [60,1,True]
	Сделано для 60,61: загрузка картинок и генерация предметов на карте
	Сделано для 60-79: проверка на добавление в inventory и уменьшение счетчика
	Сделано для 60-79: проверка на выполнение задания, счетчик pick_complete
	Сделано для 60-79: проверять что inventory может быть пустым [1,['EMPTY',0,0,0]]
	Сделано для 60-79: проверять, что уже такой предмет есть в inventory(weapon, material)
	Сделано: пули для minigun (9)
	Сделано: pick_array - помечать что уже собраны
	Сделано: показывать сколько уже выполнено PICK в display_level_target() используя pick_array
	Надо(сделано 70,71): отрисовка материалов (чип, металл, оптика, механизм, гель, антиматерия, радио, биоматериалы, радиоактивные)
	
	Надо: 'BOSS' - убить всех врагов определенного типа (t) - тип врага, например слизевик
	Сделано: генериться 1 враг определенного типа('BOSS') в startobjects() и проверяется что он убит
	Надо: сделать проверку по всему списку врагов определенного типа, что все они убиты
	Надо: счетчик статистики по убитым боссам и учет в полученном опыте
	Надо: перенести инициализацию задания в функцию (сейчас все в начале gameloop())

54. Сохранять достижения в файл и матрицу достижений, вычисляя их после прохождения уровня.
	Максимальная достигнутая точность
	Количество убитых врагов
	Максимальный процент открытия карты
	Убитые типы боссов
56. Разделение на модули и почистить лишнее:
	ok 1. maze_init: Переменные
	2. maze_display: Функции отображения (карта, игрок, информация, загрузка картинок в функцию)
	3. maze_startlevel: Функции генерации (все что есть в startlevel())
	4. maze_menu: Функции main_menu() и связанные с ней (кнопки, апгрейды и т.п.) и пауза и gameover()
	5. maze_sound: Функции звуков и загрузка звуков
	6. maze_play: Функции внутри игрового цикла (обновление тумана войны, выстрелы, обновление опыта, движение врагов, полет пуль)
	7. maze_main: Основной модуль (вызов остальных модулей, игровой цикл)
57. Показывать значок звука (вкл. или выкл.)
58. Сделать дрона и переключение между игроком и дроном:
	Надо: Сделать апгрейды для дрона
59. Сделать клеточный автомат - слизь. См. описание уровня 15 и клеточные автоматы ниже.
60. Перененести проект на свой git сервер
61. Для сети использовать json формат передачи данных
62. Серверную часть срастить с СУБД хорошо масштабируемой например mongoDB
63. Проверить обход двухмерных массивов, чтобы был оптимален по временив зависимости от порядка индекса
64. Сделать врага, который периодически становиться видимым. Или при определенных условиях. Составить описание всех врагов.
65. Генетический генератор типов врагов. При большом варианте действий врагов можно генерировать сами типы.
66. Пасхалки - придумтаь как прятать что-то. Например случайнй враг или проход в немного отличающуюся стену или какая-то яма ведет куда-то или где-то есть переключатель. Это увеличивает переигрываемость, а значит и время игры.
67. Переделать апгрейды игрока. Каждый апгрейл конкретной способности дороже предыдущего, но с каждым уровнем игрока растет стоимость любого апгрейда.
68. Переделать расчет статистики и считать KILL по типам врагов.
69. сделать блоки, которые перемещаются сами со временем
!60. Сделать генераторы:
	сделано: в матрице уровней 50,51,52
	сделано: генерация объектов в лабиринте в startobjects() 50,51,52
	сделано: отрисовка генераторов 50,51,52
	сделано: изменение(приращение) objects_change(objects_array) 50,51,52,53
	сделано: отрисовать ресурс генератора
	сделано: изменение концентрации, чтобы был пересчет при наличие генератора oyxgen 52 на уровне (startlevel())
	сделано: встать на генератор 50,51 и восстановить энергию или здоровье
	сделано: изменение среды oxygen с помощью 52 (next_env())
	сделано: изменение состояния (state) генераторов (кнопка ENTER)
	сделано: описание работы и управления генераторами в help.txt
	надо: сделать логику и отрисовку для 53 (slime  generator)
		см. уровень 15 - слизевик
		см. генератор (биоавтомат)
	надо: сделать логику и отрисовку для 54 (water generator)
	

что важнее в данный момент:
!генераторы (энергия, здоровье, кислород и другие) - есть ресурс, который постоянно растет до заданного максимума, если генератор включен. Игрок может получить ресурс либо с генератора (энергия, здоровье), либо со среды (кислород).
	как крафтить? как влиять на геймплей управлением и контролем генераторов?
	какие еще генераторы сделать? (slime, water, biogas, food, enemy generator)
	как формировать custom базы в лабиринте?
среда-slime - какой алгоритм у клеточного автомата? генератор! (феромоны, еда, монстр)
стреляющий враг
стрельба по любому направлению
!новое оружие и модификации, inventory - крафтинг? что собирать? как управлять переключением inventory? протестировать переключение не на оружие и стрельбу.
custom levels, level generator

уровни игры:
ok 1. простой лабиринт, надо пройти от одного угла к другому (отслеживание MOVE)
!2. ДВИГАЮЩИЕСЯ БЛОКИ лабиринт с блоками, которые можно толкать или тащить (надо отслеживать при MOVE+PUSH что есть блок и что за ним если толкать, при MOVE+PULL что блок зацеплен и что есть куда ходить, и action GET - зацепить)
	осталось: блоки PULL и зацепление блока
3. ДВЕРИ лабиринт с дверями, их можно открывать (отслеживать MOVE в сторону двери, оставаться на месте, дверь открывается) и они автоматически закрываются (отслеживать MOVE в сторону от от двери). Некоторые двери имеют замки (отслеживать при открытии наличие ключа, тип двери меняется при открытии, некоторые могут открываться навсегда)
ок 4. ЭНЕРГИЯ И КИСЛОРОД лабиринт, в котором надо найти и собрать все предметы, например определенного типа. Например у игрока есть энергия, ее надо пополнять, он тратиться с движением. Есть воздух - он тратиться со временем. Если до выхода что-то закончиться - то игра не пройдена. 
ок 5. ВАКУУМ генераторы кислорода и 2 перемешивающиеся среды - вакуум и воздух. Когда воздух разрежен, начинает тратиться воздух в скафандре. Когда воздуха много, скафандр пополняет воздух до 100%, при этом тратит энергию для всасывания. Среда пересчитывается каждый тик. Генератор кислорода постоянно создает на своем поле высокую концентрацию кислорода. На миникарте можно видеть уровень концентрации кислорода (синий цвет разной тональности).
!6. ВРАГИ, МИНЫ И БЛИЖНИЙ УРОН. Игрок имеет здоровье. Скафандр имеет броню, поглощающую % от урона и расходуемая как здоровье во время нападения. Есть аптечки со здоровьем. На карте появляются враги(монстры), которые перемещаются, у них есть скорость, уровень агрессии, урон, здоровье. Когда они нападают расходуется здоровье и броня. У игрока есть оружие ближнего боя, которое отвечает во время атаки врага. Можно устанавливать мины. Мины могут быть двух типов - реагирующие на движение врага (на своих не реагирует) и взрывающиеся по таймеру через определенное количество тиков. В лабиринте есть объекты: аптечки, оружие ближнего боя с разным уроном, усилители брони(восстанавливают часть ресурса брони) , враги, незаряженные мины. 
	сделаны рандомно перемещающиеся враги
	отслеживается столкновение врага и нападение на врага, взаимный урон, game over и выбывание врагов
	сделана матрица типов, выбор в startobjects() [x,y,10,0,0,0,1,5,False] #enemy x,y,speed(act=10),act,state(random=0),type,heal,damage,killed
	добавлена аптечка
	!надо: больше типов врагов ближнего боя (уже есть 4 штуки) и картинок к ним, разное поведение
7. РАЗРУШЕНИЕ СТЕН И ДАЛЬНИЙ УРОН Появляются стены, которые могут быть разрушены. Разрушить можно взрывом от мины. Можно собрать оружие дальнего боя. И игрока есть направление, в котором он смотрит. Если он двигается, то направление по пути движения. Если надо развернутся, то вместо движения в другую сторону происходит поворот. Можно использовать мышь для нацеливания на врага. Тогда поворот происходит автоматически в направлении мышки.
8. ПИЛОТ И ДРОН кроме пилота есть дрон, на которого можно переключаться. Одновременно можно управлять только кем-то одним.  У дрона есть радиус, на который он может уходить от пилота. Дальше сигнал теряется и он останавливается. Дрону не нужен кислород, он может перемещаться в вакууме постоянно. У него есть только броня, энергия (намного больше чем у пилота, в зависимости от конфигурации), встроенное энергетическое оружие, расходующее энергию. У дрона есть радар, сканирующий либиринт по радиусу (расширенный туман войны). Есть ретрансляторы которые можно собирать и устанавливать, они увеличивают радиус связи с дроном.
9. МАСТЕРСКАЯ. По лабиринту разбросаны различные электронные компоненты. Собирая их в мастерскую, можно производить ремонт дрона и апгрейд его способностей и характеристик. Например: усиление брони, увеличение емкости и эффективности батарей, ускоренное шасси, больший радиус радара, устойчивость в опасным средам (вода, огонь, кислота), умение взламывать устройства, усиленное энергетическое оружие.
10. ЛЕКАРСТВО И ЯД. Монстров можно отравить распылив газ. Есть монстры, которые сами распыляют ядовитый газ. Есть антидот, используется при отравлении газом. Можно установить или включить очистители воздуха, быстро всасывающие газ.
11. МНОГОЭТАЖКА. Лабиринт имеет несколько этажей. Между этажами есть лифты. Кроме того, встречаются порталы. Нижний этаж затоплен. Там есть ямы, в которые может утекать вода. Выход находится на нижнем этаже.
еще примеры уровней:
ok 12. нет objects_oxygen, дышать можно только внешней средой, тратя энергию на сбор
13. нет objects_oxygen, много энергии вокруг, куча дыр, надо собирать энергию, включать и отключать генераторы кислорода, чтобы дойти до конца
!14. надо найти всех врагов и уничтожить (mazeleves_target[]['KILL'] параметр количества необходимых убийств)
	при размножающихся врагах может быть KILL больше чем врагов, т.е. надо будет ждать пока размножаться
15. враг типа "среда", распространяется почкованием вместо движения, поглощает кислород из внешней среды, выделяет ядовитый газ
	слизевик: простейший организм с самоорганизацией. Двигается пульсациями жидкости по проложенным каналам внутри суперклетки. Двигается в сторону еды и в поисках еды. При недостатке еды выращивает плодовое тело со спорами, похожее на гриб.
	как реализовать: питание - матрица слизевика, матрица кислорода (питание), матрица убитых врагов, распространяет тело по всем коридорам. Если пищи мало - образует ядовитые споры, убивающие врагов и дальше слизевик их поедает.
	Есть места источников питания, как генераторы, уничтожив их можно прекратить рост слизевика.
16. custom , есть готовые коридоры прямоугольниками из двигающихся блоков, по всей карте, надо закрыть все ямы и стабилизировать затраты кислорода, пока он не закончился

развитие игрока(пилот):
ОСНОВНЫЕ ПАРАМЕТРЫ
скорость (количество тиков, требующихся на ход, в том числе с учетом скафандра, выше вероятность увернуться от атак ближнего боя)
восприятие (радиус тумана войны и точность стрельбы дальним уроном)
выносливость (эффективность использования кислорода, устойчивость в ядовитому газу, больше здоровья)
удача (чаще генерируются полезные объекты, либо если низкая - чаще генерируются опасные монстры)
интеллект (высокий дает возможность взлома без дрона, владение энергетическим оружием, возможность установки имплантов, улучшающих параметры)
сила (больше здоровья, возможность носить более крупное оружие и броню и больше предметов, больше урон ближнего боя)

игрок распределяет свои основные параметры, которые влияют на все действия и другие характеристики. 
Игрок получает опыт и уровни.
С каждым уровнем он может их немного увеличивать.
так же он может использовать имплант для их временного увеличения, пока он установлен.
Опыт можно получать:
	Убийства монстров и врагов.
	Убийство других игроков.
	Достижения.
	Выполнение заданий (надо придумать квесты со временем).
	Нахождение секретов.
	Выполнение различных действий.
	Степень открытия карты.
Невозможно прокачать за короткое время все параметры на максимум, нужно много и разнообразно играть.
Вести статистику действий
Вести общий список достижений (показывать в главном меню)

развитие игрока(дрон):
ОСНОВНЫЕ ПАРАМЕТРЫ
есть несколько базовых конфигураций шасси, генератора, сенсорной системы и блока управления. В них можно устанавливать дополнительные модули в мастерской.
1. блок управления - вычислительная мощность, объем памяти и канала передачи данных.
2. сенсорная система - улучшение восприятия среды, дальность ретрансляции сигнала
3. шасси - повышает скорость, объем переносимой массы
4. генератор - объем и эффективность распределения энергии
5. Броня - дает различные типы защиты
6. оружие

блоки имеют массу (кроме шасси), потребляемую энергию (кроме генератора), количество модулей управления (кроме блока управления).
1. Блок управления - ограничивает сверху количество модулей остальных блоков. Чем меньше блоков, тем быстрее получается опыт, если есть дельта между максимумом и текущими модулями.
2. Генератор - ограничивает сверху суммарную потребляемую энергию. Чем меньше потребляет тем медленней тратиться энергия, если есть дельта. Имеет объем хранения энергии.
3. Шасси - ограничивает сверху суммарную массу остальных блоков. Чем меньше масса тем быстрее скорость, если есть дельта между максимумом и текущей массой.
4. Сенсорная система - разные модули дают разные типы восприятия (видео, вибрация, радио, среды) и параметры дальности. Можно отключать (снижать потребление энергии и модулей). Можно вообще выбросить, чтобы снизить массу. Есть модуль ретрансляции сигнала (передающая антенна).
5. Броня - Увеличивает здоровье, поглощаемый урон, бывают разные типы брони от разного урона и среды. При полном разрушении может выйти из строй один из блоков. Может самовосстанавливаться. Может чинить другие поврежденные блоки со временем.
	Приоритеты критических повреждений:
		Ломается оружие (нельзя атаковать)
		Ломается сенсорная система (пропадает восприятие и связь с дроном)
		Ломается шасси (обездвиживание)
		Ломается генератор (энергия тратиться быстро и потом дрон выключается)
		Ломается блок управления (смерть)
	пример:
	 critical WEAPON hit = 200
	 enemy hit damage = 5
	 probability critical hit for WEAPON = 5 / 200 = 0.025
6. Оружие:
	gun точечное (пушка). Тратит патроны.
	laser лазерное (по линии насквозь и мгновенно). Тратит энергию.
	blast молния (волну урона вокруг). Тратит энергию.
	swarm рой (пули летают случайно вокруг дроне возвращаясь. Наносят урон при столкновении с ними. Можно собирать обратно.) Тратят патроны.
базовый набор:
type 			module	energy 	mass
CPU(5)			>4		1		1		
GENERATOR(4)	1		>4		1		100
CHASSIS(5)		1		1		>4		SPEED SLOW
SENSOR(visual)	1		1		1		FOG of WAR
ARMOR(100hp)	1		1		1		100
WEAPON(NO)		0		0		0
апгрейды: только один модуль. Например:
WEAPON(gun)		1		1		1

пример расчета опыта и апгрейдов:
LEVEL_1=4000
k=1.5
LEVEL_n=LEVEL_n-1 * k
example: LEVEL_20=8867351,28 , если в минуту 5000 опыта, то это 1700 минут=30 часов непрерывной игры


С каждым уровнем увеличиваются возможности блока управления, дрон обучается выполнять алгоритмы более эффективно, может использовать больше памяти, а значит контролировать больше модулей в своей структуре.
Каждая из компонент дрона требует содержит модули, их количество не может быть больше возможности блока управления.
Например:
шасси - 1 модуль
генератор - 4 модуля (питание для 4 других компонент стандартной мощности)
броня - 3 модуля (физическая защита с 3 сторон)
сенсорная система - 2 модуль (зрение, радио)
всего модулей = 1+4+3+2=10
стандартный блок управления - поддерживает управление от 10 (база) до 15 модулей. Т.е. в начале больше ничего не установить. При получении опыта, СУ сможет управлять 15 модулями, дальше ее придеться менять.

вопросы:
Нужно ли вводить деньги и магазин (например на центральной станции и до нее еще добраться надо)? (например там продавать генераторы, оружие и боеприпасы, компоненты, заказывать квесты)
Что делать с респавном при убийстве и предметами?
Что делать с майнингом и крафтингом? (например при убийствах могут выпадать кристаллы или другие материалы для крафтинга)
насколько большой должна быть вся карта действий и как устроена?

формула расчета опыта(версия 1):
player_action={'MOVE':0,'FIRE':0,'FOG':0, 'PICK':0} #player action counts. statistics
expirience=player_action['PICK']*100+player_action['FOG']+player_action['MOVE']+player_action['KILL']*100+int(player_oxygen)+int(player_energy)+int(player_heal)
при запуске уровня:initplayer()->starttime=time.clock()
после прохождения уровня: timebonus=int((grid_x*grid_y)/(time.clock()-starttime))
тест:
79*45, fog=3,oxygen=5,energy=30,randomcicles=200 -> exp=3800 time=250 sec timebonus=14
добавить в опыт или достижения:
убийство босса
точность попадания или хиты
открытие секретов
---------------
размышления о средах и клеточных автоматах (это чуть ли не основной элемент игры):
ок 1. кислород - свободно распространяется в коридорах, генериться и утекает в ямы
	Г1 генератор кислорода - постоянно генерирует кислород
	Г2 генератор энергии - постоянно генерирует энергию
	Если есть 2 комнаты, в каждой - (портал, Г1, Г2), то для кооперативной игры очень подходит.
2. Биоавтомат - питается, распространяется, есть матрица трупов (enemy_kill=True) см. уровень 15
	Г3 - генератор питания, который надо разрушить или отключить
3. Биогаз - распространяется как кислород, причиняет постоянный урон, монстры могут мутировать в более опасных или вообще могут сгенериться новые.
	Антидот - дает временную защиту от газа
	Эффекты на игрока - отбирает здоровье, замедляет
	Генератор - источники биогаза
	Насос и дыры - засасывают биогаз, как кислород
4. Вода - затапливает коридоры, есть направление потоков
	Водоплавающие враги, двигаются только в пределах воды
	Некоторые враги меняют свою тактику в завимости от среды (воздух, вакуум, вода)
	Генераторы - выключаются, когда затоплены
	Лифты и дыры - засасывают и передают на следующий этаж, если есть
	Игрок - замедляеться в зависимости от плотности воды, сильное давление может даже обездвижить или сдвинуть
5. Враги - некоторые враги при столкновении могут объединяться и мутировать
6. Блоки, которые сами двигаются, либо случайно, либо по правилам, как в игре life.
7. Паразит врагов - меняющий поведение врага клеточный автомат, существующий сам по себе. Получается некая сложная среда, определенные области, попадая в которые враги, например, начинают становиться агрессивными
8. Враги распадаются на множество маленьких, которые рояться и атакуют. Происходит например это после достижения определенного расстояния до игрока или еще при каких-то условиях
9. Оружие - рой (swarm gun)

---------------
База данных на стороне сервера:

mongodb
mongod.exe --dbpath C:\WORK\Docs\python\mongodb\data - запуск сервера с указанием пути к базе
db.custom_mazes - коллекция заранее сгенеренных лабиринтов
db.user_sessions
db.users
db.saves
db.mazes
есть ограничения на размер find() и размер коллекции
есть распределение нагрузки между серверами
есть агрегирование и индексы для коллекций

---------------------------
git:
https://github.com/satrum/maze.git

------------------
изучить опыт других игр:
dwarf fortress - механику игры, в ней графика не главное, но важно что с лабиринтом
поискать где используется в геймплее клеточные автоматы и механику взаимодействия игрока с ними
графика в 2D - посмотреть примеры как можно оживить игру в плоскости, учитывая мобильный вариант игры

что подчерпнуть из методологии:
клеточный автомат жизнь и его модификации, что еще сделано в этой области
муравьиный алгоритм
алгоритмы поиска пути (волновой и др. Поиск пути — Википедия) https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B8%D1%81%D0%BA_%D0%BF%D1%83%D1%82%D0%B8
роевой интеллект - https://ru.wikipedia.org/wiki/%D0%A0%D0%BE%D0%B5%D0%B2%D0%BE%D0%B9_%D0%B8%D0%BD%D1%82%D0%B5%D0%BB%D0%BB%D0%B5%D0%BA%D1%82

-----------------
другие заметки:
клиент:
установление соединения с сервером (PodSixNet)
авторизация на сервере
получение карты с сервера
отображение карты в окне (pygame)
взаимодействие с картой и передача на сервер действий и контекста клиента

сервер:
запуск сервера (PodSixNet)
генерация карты на сервере
авторизация клиента
передача карты на клиент в зависимости от контекста
получение от клиента действий, проверка и реакция на действия

протокол:
PodSixNet
https://github.com/chr15m/PodSixNet/tree/python3
https://github.com/chr15m/PodSixNet/archive/python3.zip
The module is found inside a subdirectory called PodSixNet within the top level folder. There's an __init__.py inside there, so you can just copy or symlink the PodSixNet sub-directory into your own project and then do import PodSixNet, or else you can run "sudo python setup.py install" to install PodSixNet into your Python path. Use sudo python setup.py develop if you want to stay up to date with the cutting edge and still be able to svn/bzr up every now and then.

client -> server
server -> client


surface:
displaysurface=pygame.display.set_mode((x,y))
surface = pygame.image.load('foo.png').convert() #about a 6x increase in blitting speed by calling convert().
pygame.display.update() – This updates the whole window (or the whole screen for fullscreen displays).
pygame.display.flip() – This does the same thing, and will also do the right thing if you’re using doublebuffered hardware acceleration, which you’re not, so on to...
pygame.display.update(a rectangle or some list of rectangles) – This updates just the rectangular areas of the screen you specify.
rect = pygame.Rect(x, y, width, height)

surface.set_colorkey(color), where color is a rgb tuple – say (0,0,0). This would make every pixel in the source image transparent instead of black
Alpha’ is different, and it comes in two flavors. ‘Image alpha’ applies to the whole image, and is probably what you want. Properly known as ‘translucency’, alpha causes each pixel in the source image to be only partially opaque. For example, if you set a surface’s alpha to 192 and then blitted it onto a background, 3/4 of each pixel’s color would come from the source image, and 1/4 from the background. Alpha is measured from 255 to 0, where 0 is completely transparent, and 255 is completely opaque. Note that colorkey and alpha blitting can be combined – this produces an image that is fully transparent in some spots, and semi-transparent in others.
‘Per-pixel alpha’ is the other flavor of alpha, and it’s more complicated. Basically, each pixel in the source image has its own alpha value, from 0 to 255. Each pixel, therefore, can have a different opacity when blitted onto a background. This type of alpha can’t be mixed with colorkey blitting, and it overrides per-image alpha. Per-pixel alpha is rarely used in games, and to use it you have to save your source image in a graphic editor with a special alpha channel. It’s complicated – don’t use it yet.

http://www.pygame.org/docs/ref/surface.html

